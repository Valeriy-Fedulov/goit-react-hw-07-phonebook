{"version":3,"sources":["components/contact/Contact.module.css","components/filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/contactform/ContactForm.js","components/contact/Contact.js","components/contactlist/ContactList.js","components/filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/contactform/ContactForm.module.css"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","setFilter","axios","defaults","baseURL","getItems","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","name","includes","ContactForm","useState","setName","phone","setPhone","useSelector","dispatch","useDispatch","className","s","form","onSubmit","e","preventDefault","find","contact","alert","post","then","data","catch","error","addContact","input","type","pattern","title","required","value","onChange","currentTarget","button","Contact","useEffect","get","map","list","onClick","id","delete","ContactList","Filter","App","createReducer","_","payload","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c6642b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contact_list__2_2Uc\",\"button\":\"Contact_button__jYwrt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__3K0YO\"};","import { createAction } from '@reduxjs/toolkit';\n\nexport const fetchContactsRequest = createAction(\n  'contacts/fetchContactRequest',\n);\nexport const fetchContactsSuccess = createAction(\n  'contacts/fetchContactSuccess',\n);\nexport const fetchContactsError = createAction('contacts/fetchContactError');\n\nexport const addContactRequest = createAction('contacts/addContactRequest');\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\nexport const addContactError = createAction('contacts/addContactError');\n\nexport const deleteContactRequest = createAction(\n  'contacts/deleteContactRequest',\n);\nexport const deleteContactSuccess = createAction(\n  'contacts/deleteContactSuccess',\n);\nexport const deleteContactError = createAction('contacts/deleteContactError');\n\nexport const setFilter = createAction('contact/setFilter');\n","import axios from 'axios';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n} from './contacts-actions';\n\naxios.defaults.baseURL = 'https://61b810b564e4a10017d18d8c.mockapi.io';\n\nexport const fetchContacts = () => dispatch => {\n  dispatch(fetchContactsRequest());\n\n  axios\n    .get('/contacts')\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\n    .catch(error => dispatch(fetchContactsError(error)));\n};\n\nexport const addContact =\n  ({ name, phone }) =>\n  dispatch => {\n    dispatch(addContactRequest());\n\n    axios\n      .post('/contacts', { name, phone })\n      .then(({ data }) => dispatch(addContactSuccess(data)))\n      .catch(error => dispatch(addContactError(error)));\n  };\n\nexport const deleteContact = id => dispatch => {\n  dispatch(deleteContactRequest());\n\n  axios\n    .delete(`/contacts/${id}`)\n    .then(() => dispatch(deleteContactSuccess(id)))\n    .catch(error => dispatch(deleteContactError(error)));\n};\n","export const getItems = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const items = getItems(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return items.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import React, { useState } from 'react';\nimport s from './ContactForm.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from '../../redux/contacts/contacts-operations';\nimport { getItems } from '../../redux/contacts/contacts-selectors';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n\n  const items = useSelector(getItems);\n  const dispatch = useDispatch();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (items.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts`);\n    } else {\n      dispatch(addContact({ name, phone }));\n      reset();\n    }\n  }\n\n  function reset() {\n    setName('');\n    setPhone('');\n  }\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={e => {\n            setName(e.currentTarget.value);\n          }}\n        />\n      </label>\n      <label>\n        Phone\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={phone}\n          onChange={e => {\n            setPhone(e.currentTarget.value);\n          }}\n        />\n      </label>\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import s from './Contact.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\nimport { useEffect } from 'react';\nimport {\n  deleteContact,\n  fetchContacts,\n} from '../../redux/contacts/contacts-operations';\n\nexport default function Contact() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {contacts.map(contact => (\n        <li className={s.list} key={contact.id}>\n          {contact.name}: {contact.phone}\n          <button\n            className={s.button}\n            type=\"button\"\n            onClick={() => dispatch(deleteContact(contact.id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </>\n  );\n}\n","import Contact from '../contact';\n\nconst ContactList = () => (\n  <ul>\n    <Contact />\n  </ul>\n);\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n\nexport default function Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label>\n      Find contacts by name\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        value={filter}\n        onChange={e => dispatch(setFilter(e.currentTarget.value))}\n      />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n","import './App.css';\nimport ContactForm from './components/contactform';\nimport ContactList from './components/contactlist';\nimport Filter from './components/filter';\n\nfunction App() {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport {\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  setFilter,\n} from './contacts-actions';\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nconst filter = createReducer('', {\n  [setFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n// import logger from 'redux-logger';\nimport {\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  // logger,\n];\n\nconst store = configureStore({\n  reducer: {\n    contacts: contactsReducer,\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\n// const persistor = persistStore(store);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n// import { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={store.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__15_C6\",\"input\":\"ContactForm_input__5U5De\",\"button\":\"ContactForm_button__2bcWB\"};"],"sourceRoot":""}