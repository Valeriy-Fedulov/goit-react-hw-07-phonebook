{"version":3,"sources":["components/contact/Contact.module.css","components/filter/Filter.module.css","redux/contacts/contacts-actions.js","redux/contacts/contacts-selectors.js","components/contactform/ContactForm.js","components/contact/Contact.js","components/contactlist/ContactList.js","components/filter/Filter.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js","components/contactform/ContactForm.module.css"],"names":["module","exports","addContact","createAction","deleteContact","setFilter","getItems","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","name","includes","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","className","s","form","onSubmit","e","preventDefault","find","contact","alert","actions","id","uuidv4","input","type","pattern","title","required","value","onChange","currentTarget","button","Contact","map","list","onClick","ContactList","Filter","App","createReducer","payload","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.64412bcc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Contact_list__38wwM\",\"button\":\"Contact_button__5-JV7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__1td-t\"};","import { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contact/addContact');\nconst deleteContact = createAction('contact/deleteContact');\nconst setFilter = createAction('contact/setFilter');\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { addContact, deleteContact, setFilter };\n","export const getItems = state => state.contacts.items;\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const items = getItems(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return items.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter),\n  );\n};\n","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport s from './ContactForm.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport actions from '../../redux/contacts/contacts-actions';\nimport { getItems } from '../../redux/contacts/contacts-selectors';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const items = useSelector(getItems);\n  const dispatch = useDispatch();\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (items.find(contact => contact.name === name)) {\n      alert(`${name} is already in contacts`);\n    } else {\n      dispatch(actions.addContact({ id: uuidv4(), name, number }));\n      reset();\n    }\n  }\n\n  function reset() {\n    setName('');\n    setNumber('');\n  }\n\n  return (\n    <form className={s.form} onSubmit={handleSubmit}>\n      <label>\n        Name\n        <input\n          className={s.input}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={e => {\n            setName(e.currentTarget.value);\n          }}\n        />\n      </label>\n      <label>\n        Number\n        <input\n          className={s.input}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={e => {\n            setNumber(e.currentTarget.value);\n          }}\n        />\n      </label>\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n","import PropTypes from 'prop-types';\nimport s from './Contact.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport actions from '../../redux/contacts/contacts-actions';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\n\nexport default function Contact() {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      {contacts.map(contact => (\n        <li className={s.list} key={contact.id}>\n          {contact.name}: {contact.number}\n          <button\n            className={s.button}\n            type=\"button\"\n            onClick={() => dispatch(actions.deleteContact(contact.id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </>\n  );\n}\n\nContact.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.shape),\n  filter: PropTypes.string,\n};\n","import Contact from '../contact';\n\nconst ContactList = () => (\n  <ul>\n    <Contact />\n  </ul>\n);\n\nexport default ContactList;\n","import PropTypes from 'prop-types';\nimport s from './Filter.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport actions from '../../redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n\nexport default function Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <label>\n      Find contacts by name\n      <input\n        className={s.input}\n        type=\"text\"\n        name=\"filter\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        value={filter}\n        onChange={e => dispatch(actions.setFilter(e.currentTarget.value))}\n      />\n    </label>\n  );\n}\n\nFilter.propTypes = {\n  filter: PropTypes.string,\n};\n","import './App.css';\nimport ContactForm from './components/contactform';\nimport ContactList from './components/contactlist';\nimport Filter from './components/filter';\n\nfunction App() {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport actions from './contacts-actions';\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.setFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nconst persistor = persistStore(store);\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { store, persistor };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1qD3L\",\"input\":\"ContactForm_input__2q9SM\",\"button\":\"ContactForm_button__2v_42\"};"],"sourceRoot":""}